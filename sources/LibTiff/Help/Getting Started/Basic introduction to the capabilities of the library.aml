<?xml version="1.0" encoding="utf-8"?>
<topic id="7404175a-f67f-479b-83f7-0e6dc75b9acf" revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
        <introduction>
            <para>This article describes some basic stuff about LibTiff.Net</para>
        </introduction>
        <section address="Section1">
            <content></content>
            <sections>
                <section address="SubSection1">
                    <title>Error Handling</title>
                    <content>
                        <para>
                            LibTiff.Net handles most errors by returning an invalid/erroneous
                            value when returning from a function call. Various diagnostic messages
                            may also be generated by the library. All error and warning messages
                            are directed to a single global error handler object that can be
                            specified with a call to
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)</codeEntityReference>.
                        </para>
                    </content>
                </section>
                <section address="SubSection2">
                    <title>Basic File Handling</title>
                    <content>
                        <para>
                            The library (like libtiff) is modeled after the normal stdio library.
                            For example, to read from an existing TIFF image the file must first 
                            be opened:
                        </para>
                        <code language="cs">
                            Tiff image = Tiff.Open("foo.tif", "r")
                            // ... do stuff ...
                            image.Close(); // or image.Dispose();
                        </code>
                        <para>
                            To create or overwrite a TIFF image the file is also opened, but
                            with a "w" argument:
                        </para>
                        <code language="cs">
                            Tiff image = Tiff.Open("foo.tif", "w")
                            // ... do stuff ...
                            image.Close(); // or image.Dispose();
                        </code>
                        <para>
                            If the file already exists it is first truncated to zero length.
                        </para>
                        <alert class="note">
                            <para>
                                TIFF image files may not be opened for both reading and writing
                                by LibTiff.Net; there is no support for altering the contents of
                                a TIFF file.
                            </para>
                        </alert>
                        <para>
                            LibTiff.Net buffers much information associated with writing a valid
                            TIFF image. You should dispose all
                            <codeEntityReference>T:BitMiracle.LibTiff.Classic.Tiff</codeEntityReference>
                            objects. When writing a TIFF image it is especcialy important.
                            You can also call
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Close</codeEntityReference>
                            at any time to close image (note that image is automatically closed
                            during disposal). You can flush buffered data at any time using 
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Flush</codeEntityReference>.
                        </para>
                    </content>
                </section>
                <section address="SubSection3">
                    <title>TIFF Directories</title>
                    <content>
                        <para>
                            TIFF supports the storage of multiple images in a single file. Each
                            image has an associated data structure termed a
                            <legacyItalic>directory</legacyItalic> that houses all the information
                            about the format and content of the image data. Images in a file are
                            usually related but they do not need to be; it is perfectly alright to
                            store a color image together with a black and white image. Note
                            however that while images may be related their directories are not.
                            That is, each directory stands on its own; their is no need to read an
                            unrelated directory in order to properly interpret the contents of
                            an image.
                        </para>
                        <para>
                            LibTiff.Net provides several routines for reading and writing
                            directories. In normal use there is no need to explicitly read or
                            write a directory: the library automatically reads the first directory
                            in a file when opened for reading, and directory information to be
                            written is automatically accumulated and written when writing
                            (assuming
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Dispose</codeEntityReference>,
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Close</codeEntityReference> or
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.Flush</codeEntityReference>
                            are called).
                        </para>
                        <para>
                            For a file open for reading the
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.SetDirectory(System.Int16)</codeEntityReference>
                            method can be used to select an arbitrary directory; directories are
                            referenced by number with the numbering starting at 0. Otherwise the
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.ReadDirectory</codeEntityReference> and
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.WriteDirectory</codeEntityReference>
                            methods can be used for sequential access to directories. For example,
                            to count the number of directories in a file the following code
                            might be used:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace CountTiffDirectories
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff image = Tiff.Open(args[0], "r"))
                                        {
                                            if (image == null)
                                                return;

                                            int dircount = 0;
                                            do
                                            {
                                                dircount++;
                                            } while (image.ReadDirectory());

                                            System.Console.Out.WriteLine("{0} directories in {1}", dircount, args[0]);
                                        }
                                    }
                                }
                            }
                        </code>
                        <para>
                            Finally, note that there are couple of methods for querying the
                            directory status of an open file:
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.CurrentDirectory</codeEntityReference> and
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.LastDirectory</codeEntityReference>.
                        </para>
                        <para>
                            There is also
                            <codeEntityReference>Overload:BitMiracle.LibTiff.Classic.Tiff.PrintDirectory</codeEntityReference>
                            that can be called to print a formatted description of the
                            contents of the current directory.
                        </para>
                    </content>
                </section>
                <section address="SubSection4">
                    <title>TIFF Tags</title>
                    <content>
                        <para>
                            Image-related information such as the image width and height, number
                            of samples, orientation, colorimetric information, etc. are stored in
                            each image directory in <legacyItalic>fields</legacyItalic> or
                            <legacyItalic>tags</legacyItalic>. Tags are identified by a number
                            that is usually a value registered with the Aldus (now Adobe)
                            Corporation. LibTiff.Net uses
                            <codeEntityReference>T:BitMiracle.LibTiff.Classic.TiffTag</codeEntityReference>
                            enumeration instead of numbers to make code much more readable and
                            understandable. Beware however that some vendors write TIFF
                            images with tags that are unregistered; in this case interpreting
                            their contents is usually a waste of time.
                        </para>
                        <para>
                            LibTiff.Net reads the contents of a directory all at once and converts
                            the on-disk information to an appropriate in-memory form. While the
                            TIFF specification permits an arbitrary set of tags to be defined and
                            used in a file, the library only understands a limited set of tags.
                            Any unknown tags that are encountered in a file are ignored. There is
                            a mechanism to extend the set of tags the library handles without
                            modifying the library itself; this is described in
                            <link xlink:href="e0ed9e8f-4b0e-4480-9693-fbf731ed3b2f"/>
                            article.
                        </para>
                        <para>
                            LibTiff.Net provides two methods for getting and setting tag values:
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.GetField(BitMiracle.LibTiff.Classic.TiffTag)</codeEntityReference> and
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.SetField(BitMiracle.LibTiff.Classic.TiffTag,System.Object[])</codeEntityReference>.
                            The GetField method returns array of
                            <codeEntityReference>T:BitMiracle.LibTiff.Classic.FieldValue</codeEntityReference>
                            objects. The array has length equal to number of tag values. If the
                            array is null then tag is not defined in the directory. The SetField
                            method accepts variable number of tag values as arguments. The TIFF
                            specification defines <legacyItalic>default values</legacyItalic> for
                            some tags. To get the value of a tag, or its default value if it is
                            undefined, the
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.GetFieldDefaulted(BitMiracle.LibTiff.Classic.TiffTag)</codeEntityReference>
                            method may be used.
                        </para>
                        <para>
                            You may want to consult
                            "<link xlink:href="54cbd23d-dc55-44b9-921f-3a06efc2f6ce"/>" to become
                            familiar with exact data types and calling conventions required for
                            each tag supported by the library.
                        </para>
                    </content>
                </section>
                <section address="SubSection5">
                    <title>TIFF Compression Schemes</title>
                    <content>
                        <para>
                            LibTiff.Net includes support for a wide variety of data compression
                            schemes. In normal operation a compression scheme is automatically used
                            when the
                            <codeEntityReference>T:BitMiracle.LibTiff.Classic.TiffTag</codeEntityReference>.COMPRESSION
                            tag is set, either by opening a file for reading, or by setting the
                            tag when writing.
                        </para>
                        <para>
                            Compression schemes are implemented by software modules termed
                            <legacyItalic>codecs</legacyItalic> that implement decoder and encoder
                            methods that hook into the core library i/o support. Codecs other than
                            those bundled with the library can be registered for use with the
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.RegisterCodec(BitMiracle.LibTiff.Classic.TiffCodec)</codeEntityReference>
                            method. This method can also be used to override the core-library
                            implementation for a compression scheme.
                        </para>
                    </content>
                </section>
                <section address="SubSection6">
                    <title>Byte Order</title>
                    <content>
                        <para>
                            The TIFF specification says, and has always said, that a
                            <legacyItalic>correct TIFF reader must handle images in big-endian and
                            little-endian byte order</legacyItalic>. LibTiff.Net conforms in this
                            respect. Consequently there is no means to force a specific byte order
                            for the data written to a TIFF image file (data is written in the
                            native order of the host CPU unless appending to an existing file, in
                            which case it is written in the byte order specified in the file).
                        </para>
                    </content>
                </section>
                <section address="SubSection7">
                    <title>Data Placement</title>
                    <content>
                        <para>
                            The TIFF specification requires that all information except an 8-byte
                            header can be placed anywhere in a file. In particular, it is
                            perfectly legitimate for directory information to be written after the
                            image data itself. Software that require that data be organized in a
                            file in a particular order (e.g. directory information before image
                            data) does not correctly support TIFF. LibTiff.Net provides no
                            mechanism for controlling the placement of data in a file; image data
                            is typically written before directory information.
                        </para>
                    </content>
                </section>
                <section address="SubSection8">
                    <title>RGBA Image Support</title>
                    <content>
                        <para>
                            LibTiff.Net provides a high-level interface for reading image data
                            from a TIFF file. This interface handles the details of data
                            organization and format for a wide variety of TIFF files; at least the
                            large majority of those files that one would normally encounter. Image
                            data is, by default, returned as ABGR pixels packed into 32-bit words
                            (8 bits per sample). Rectangular rasters can be read or data can be
                            intercepted at an intermediate level and packed into memory in a
                            format more suitable to the application. The library handles all the
                            details of the format of data stored on disk and, in most cases, if
                            any colorspace conversions are required: bilevel to RGB, greyscale to
                            RGB, CMYK to RGB, YCbCr to RGB, 16-bit samples to 8-bit samples,
                            associated/unassociated alpha, etc.
                        </para>
                        <para>
                            There are two ways to read image data using this interface. If all the
                            data is to be stored in memory and manipulated at once, then the
                            <codeEntityReference>Overload:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage</codeEntityReference> or
                            <codeEntityReference>Overload:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented</codeEntityReference>
                            can be used:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace UsingReadRgbaImage
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff image = Tiff.Open(args[0], "r"))
                                        {
                                            if (image == null)
                                                return;

                                            FieldValue[] value = image.GetField(TiffTag.IMAGEWIDTH);
                                            int width = value[0].ToInt();

                                            value = image.GetField(TiffTag.IMAGELENGTH);
                                            int height = value[0].ToInt();

                                            int imageSize = height * width;
                                            int[] raster = new int[imageSize];

                                            if (image.ReadRGBAImage(width, height, raster))
                                            {
                                                // ...process raster data...
                                            }

                                            image.Close();
                                        }
                                    }
                                }
                            }
                        </code>
                        <para>
                            Alternatively,
                            <codeEntityReference>
                                Overload:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage
                            </codeEntityReference>
                            can be replaced with a more low-level interface that permits an
                            application to have more control over this reading procedure. The
                            equivalent to the above is:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace UsingTiffRgbaImage
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff tif = Tiff.Open(args[0], "r"))
                                        {
                                            if (tif == null)
                                                return;

                                            string errorMsg;
                                            TiffRgbaImage img = TiffRgbaImage.Create(tif, false, out errorMsg);
                                            if (img == null)
                                            {
                                                System.Console.Error.WriteLine(errorMsg);
                                                return;
                                            }

                                            int rasterSize = img.Width * img.Height;
                                            int[] raster = new int[rasterSize];
                                            if (img.GetRaster(raster, 0, img.Width, img.Height))
                                            {
                                                // ...process raster data...
                                            }
                                        }
                                    }
                                }
                            }
                        </code>
                        <para>
                            However this usage does not take advantage of the more fine-grained
                            control that's possible. That is, by using this interface it is
                            possible to:
                            <list class="bullet">
                                <listItem>
                                    <para>
                                        repeatedly fetch (and manipulate) an image without opening
                                        and closing the file
                                    </para>
                                </listItem>
                                <listItem>
                                    <para>
                                        interpose a method for packing raster pixel data according
                                        to application-specific needs (or write the data at all)
                                    </para>
                                </listItem>
                                <listItem>
                                    <para>
                                        interpose methods that handle TIFF formats that are not
                                        already handled by the core library
                                    </para>
                                </listItem>
                            </list>
                        </para>
                        <para>
                            The first item means that, for example, image viewers that want to
                            handle multiple files can cache decoding information in order to
                            speedup the work required to display a TIFF image.
                        </para>
                        <para>
                            The second item is the main reason for this interface. By interposing a
                            <codeEntityReference>
                                P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutContig
                            </codeEntityReference> and
                            <codeEntityReference>
                                P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutSeparate
                            </codeEntityReference>
                            (the methods that are called to pack pixel data in the raster) it is
                            possible share the core logic that understands how to deal with TIFF
                            while packing the resultant pixels in a format that is optimized for
                            the application. This alternate format might be very different than
                            the 8-bit per sample ABGR format the library writes by default. For
                            example, if the application is going to display the image on an 8-bit
                            colormap display the put routine might take the data and convert it
                            on-the-fly to the best colormap indices for display.
                        </para>
                        <para>
                            The last item permits an application to extend the library without
                            modifying the core code. By overriding the code provided an application
                            might add support for some esoteric flavor of TIFF that it needs, or
                            it might substitute a packing routine that is able to do optimizations
                            using application/environment-specific information.
                        </para>
                    </content>
                </section>
                <section address="SubSection9">
                    <title>Scanline-based Image I/O</title>
                    <content>
                        <para>
                            The simplest interface provided by LibTiff.Net is a scanline-oriented
                            interface that can be used to read TIFF images that have their image
                            data organized in strips (trying to use this interface to read data
                            written in tiles will produce errors.) A scanline is a one pixel high
                            row of image data whose width is the width of the image. Data is
                            returned packed if the image data is stored with samples packed
                            together, or as arrays of separate samples if the data is stored with
                            samples separated. The major limitation of the scanline-oriented
                            interface, other than the need to first identify an existing file as
                            having a suitable organization, is that random access to individual
                            scanlines can only be provided when data is not stored in a compressed
                            format, or when the number of rows in a strip of image data is set to one 
                            (<codeEntityReference>T:BitMiracle.LibTiff.Classic.TiffTag</codeEntityReference>.ROWSPERSTRIP
                            is one).
                        </para>
                        <para>
                            Two methods are provided for scanline-based i/o:
                            <codeEntityReference>Overload:BitMiracle.LibTiff.Classic.Tiff.ReadScanline</codeEntityReference> and
                            <codeEntityReference>Overload:BitMiracle.LibTiff.Classic.Tiff.WriteScanline</codeEntityReference>.
                            For example, to read the contents of a file that is assumed to be
                            organized in strips, the following might be used:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace ReadScanlines
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff image = Tiff.Open(args[0], "r"))
                                        {
                                            if (image == null)
                                                return;

                                            FieldValue[] value = image.GetField(TiffTag.IMAGELENGTH);
                                            int imageLength = value[0].ToInt();

                                            byte[] buf = new byte[image.ScanlineSize()];
                                            for (int row = 0; row &lt; imageLength; row++)
                                                image.ReadScanline(buf, row);
                                        }
                                    }
                                }
                            }
                        </code>
                        <para>
                            <codeEntityReference>M:BitMiracle.LibTiff.Classic.Tiff.ScanlineSize</codeEntityReference>
                            returns the number of bytes in a decoded scanline, as returned by
                            <codeEntityReference>Overload:BitMiracle.LibTiff.Classic.Tiff.ReadScanline</codeEntityReference>.
                            Note however that if the file had been create with samples written in
                            separate planes, then the above code would only read data that
                            contained the first sample of each pixel; to handle either case one
                            might use the following instead:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace ReadSeparatedScanlines
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff image = Tiff.Open(args[0], "r"))
                                        {
                                            if (image == null)
                                                return;

                                            FieldValue[] value = image.GetField(TiffTag.IMAGELENGTH);
                                            int imageLength = value[0].ToInt();

                                            value = image.GetField(TiffTag.PLANARCONFIG);
                                            PlanarConfig config = (PlanarConfig)value[0].ToInt();

                                            byte[] buf = new byte[image.ScanlineSize()];

                                            if (config == PlanarConfig.CONTIG)
                                            {
                                                for (int row = 0; row &lt; imageLength; row++)
                                                    image.ReadScanline(buf, row);
                                            }
                                            else if (config == PlanarConfig.SEPARATE)
                                            {
                                                value = image.GetField(TiffTag.SAMPLESPERPIXEL);
                                                short spp = value[0].ToShort();

                                                for (short s = 0; s &lt; spp; s++)
                                                {
                                                    for (int row = 0; row &lt; imageLength; row++)
                                                        image.ReadScanline(buf, row, s);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        </code>
                        <para>
                            Beware however that if the following code were used instead to read
                            data in the case config == PlanarConfig.SEPARATE,...
                        </para>
                        <code language="cs">
                            for (int row = 0; row &lt; imageLength; row++)
                            {
                                for (short s = 0; s &lt; spp; s++)
                                    image.ReadScanline(buf, row, s);
                            }
                        </code>
                        <para>
                            ...then problems would arise if TiffTag.ROWSPERSTRIP was not one
                            because the order in which scanlines are requested would require
                            random access to data within strips (something that is not supported
                            by the library when strips are compressed).
                        </para>
                    </content>
                </section>
                <section address="SubSection10">
                    <title>Strip-oriented Image I/O</title>
                    <content>
                        <para>
                            The strip-oriented interfaces provided by the library provide access
                            to entire strips of data. Unlike the scanline-oriented calls, data can
                            be read or written compressed or uncompressed. Accessing data at a
                            strip (or tile) level is often desirable because there are no
                            complications with regard to random access to data within strips.
                        </para>
                        <para>
                            A simple example of reading an image by strips is:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace ReadStrips
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff image = Tiff.Open(args[0], "r"))
                                        {
                                            if (image == null)
                                                return;

                                            byte[] buf = new byte[image.StripSize()];
                                            for (int strip = 0; strip &lt; image.NumberOfStrips(); strip++)
                                                image.ReadEncodedStrip(strip, buf, 0, -1);
                                        }
                                    }
                                }
                            }
                        </code>
                        <para>
                            Notice how a strip size of -1 is used;
                            <codeEntityReference>
                                M:BitMiracle.LibTiff.Classic.Tiff.ReadEncodedStrip(System.Int32,System.Byte[],System.Int32,System.Int32)
                            </codeEntityReference>
                            will calculate the appropriate size in this case.
                        </para>
                        <para>
                            The above code reads strips in the order in which the data is
                            physically stored in the file. If multiple samples are present and
                            data is stored with
                            <codeEntityReference>T:BitMiracle.LibTiff.Classic.PlanarConfig</codeEntityReference>.SEPARATE
                            then all the strips of data holding the first sample will be read,
                            followed by strips for the second sample, etc.
                        </para>
                        <para>
                            Finally, note that the last strip of data in an image may have fewer
                            rows in it than specified by the TiffTag.ROWSPERSTRIP. A reader should
                            not assume that each decoded strip contains a full set of rows in it.
                        </para>
                        <para>
                            The following is an example of how to read raw strips of data from a file:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace ReadRawStrips
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff image = Tiff.Open(args[0], "r"))
                                        {
                                            if (image == null)
                                                return;

                                            FieldValue[] value = image.GetField(TiffTag.STRIPBYTECOUNTS);
                                            int[] byteCounts = value[0].ToIntArray();
                                            int stripSize = byteCounts[0];

                                            byte[] buf = new byte[stripSize];
                                            for (int strip = 0; strip &lt; image.NumberOfStrips(); strip++)
                                            {
                                                if (byteCounts[strip] &gt; stripSize)
                                                {
                                                    stripSize = byteCounts[strip];
                                                    buf = new byte[stripSize];
                                                }
                    
                                                image.ReadRawStrip(strip, buf, 0, stripSize);
                                            }
                                        }
                                    }
                                }
                            }
                        </code>
                        <para>
                            As above the strips are read in the order in which they are physically
                            stored in the file; this may be different from the logical ordering
                            expected by an application.
                        </para>
                    </content>
                </section>
                <section address="SubSection11">
                    <title>Tile-oriented Image I/O</title>
                    <content>
                        <para>
                            Tiles of data may be read and written in a manner similar to strips.
                            With this interface, an image is broken up into a set of rectangular
                            areas that may have dimensions less than the image width and height.
                            All the tiles in an image have the same size, and the tile width and
                            length must each be a multiple of 16 pixels. Tiles are ordered
                            left-to-right and top-to-bottom in an image. As for scanlines, samples
                            can be packed contiguously or separately. When separated, all the
                            tiles for a sample are colocated in the file. That is, all the tiles
                            for sample 0 appear before the tiles for sample 1, etc.
                        </para>
                        <para>
                            Tiles and strips may also be extended in a z dimension to form
                            volumes. Data volumes are organized as "slices". That is, all the data
                            for a slice is colocated. Volumes whose data is organized in tiles can
                            also have a tile depth so that data can be organized in cubes.
                        </para>
                        <para>
                            There are actually two interfaces for tiles. One interface is similar
                            to scanlines, to read a tiled image, code of the following sort might
                            be used:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace ReadTiles
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff image = Tiff.Open(args[0], "r"))
                                        {
                                            if (image == null)
                                                return;

                                            FieldValue[] value = image.GetField(TiffTag.IMAGEWIDTH);
                                            int imageWidth = value[0].ToInt();

                                            value = image.GetField(TiffTag.IMAGELENGTH);
                                            int imageLength = value[0].ToInt();

                                            value = image.GetField(TiffTag.TILEWIDTH);
                                            int tileWidth = value[0].ToInt();

                                            value = image.GetField(TiffTag.TILELENGTH);
                                            int tileLength = value[0].ToInt();

                                            byte[] buf = new byte[image.TileSize()];
                                            for (int y = 0; y &lt; imageLength; y += tileLength)
                                            {
                                                for (int x = 0; x &lt; imageWidth; x += tileWidth)
                                                    image.ReadTile(buf, 0, x, y, 0, 0);
                                            }
                                        }
                                    }
                                }
                            }
                        </code>
                        <para>
                            (once again, we assume samples are packed contiguously).
                        </para>
                        <para>
                            Alternatively a direct interface to the low-level data is provided a
                            la strips. Tiles can be read with
                            <codeEntityReference>
                                M:BitMiracle.LibTiff.Classic.Tiff.ReadEncodedTile(System.Int32,System.Byte[],System.Int32,System.Int32)
                            </codeEntityReference> or
                            <codeEntityReference>
                                M:BitMiracle.LibTiff.Classic.Tiff.ReadRawTile(System.Int32,System.Byte[],System.Int32,System.Int32)
                            </codeEntityReference>,
                            and written with
                            <codeEntityReference>
                                Overload:BitMiracle.LibTiff.Classic.Tiff.WriteEncodedTile
                            </codeEntityReference> or
                            <codeEntityReference>
                                Overload:BitMiracle.LibTiff.Classic.Tiff.WriteRawTile
                            </codeEntityReference>.
                            For example, to read all the tiles in an image:
                        </para>
                        <code language="cs">
                            using BitMiracle.LibTiff.Classic;

                            namespace ReadEncodedTile
                            {
                                class Program
                                {
                                    static void Main(string[] args)
                                    {
                                        using (Tiff image = Tiff.Open(args[0], "r"))
                                        {
                                            if (image == null)
                                                return;

                                            byte[] buf = new byte[image.TileSize()];
                                            for (int tile = 0; tile &lt; image.NumberOfTiles(); tile++)
                                                image.ReadEncodedTile(tile, buf, 0, -1);
                                        }
                                    }
                                }
                            }
                        </code>
                    </content>
                </section>
            </sections>
        </section>
    </developerConceptualDocument>
</topic>