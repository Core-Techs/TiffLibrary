<?xml version="1.0" encoding="utf-8"?>
<topic id="a74083a3-0fc0-494e-a302-9f64017355b7" revisionNumber="1">
  <developerSampleDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
<para>This sample shows how to create a multipage TIFF image. </para>

    </introduction>
    <code language="cs">
using System.Diagnostics;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class CreateMultipageTiff
    {
        public static void Main()
        {
            const int numberOfPages = 4;

            const int width = 256;
            const int height = 256;
            const int samplesPerPixel = 1;
            const int bitsPerSample = 8;

            const string fileName = &quot;CreateMultipageTiff.tif&quot;;

            byte[][] firstPageBuffer = new byte[height][];
            for (int j = 0; j &lt; height; j++)
            {
                firstPageBuffer[j] = new byte[width];
                for (int i = 0; i &lt; width; i++)
                    firstPageBuffer[j][i] = (byte)(j * i);
            }

            using (Tiff output = Tiff.Open(fileName, &quot;w&quot;))
            {
                for (int page = 0; page &lt; numberOfPages; ++page)
                {
                    output.SetField(TiffTag.IMAGEWIDTH, width / samplesPerPixel);
                    output.SetField(TiffTag.SAMPLESPERPIXEL, samplesPerPixel);
                    output.SetField(TiffTag.BITSPERSAMPLE, bitsPerSample);
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT);
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

                    if (page % 2 == 0)
                        output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);
                    else
                        output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISWHITE);

                    output.SetField(TiffTag.ROWSPERSTRIP, output.DefaultStripSize(0));
                    output.SetField(TiffTag.XRESOLUTION, 100.0);
                    output.SetField(TiffTag.YRESOLUTION, 100.0);
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH);

                    // specify that it's a page within the multipage file
                    output.SetField(TiffTag.SUBFILETYPE, FileType.PAGE);
                    // specify the page number
                    output.SetField(TiffTag.PAGENUMBER, page, numberOfPages);

                    for (int j = 0; j &lt; height; ++j)
                        output.WriteScanline(firstPageBuffer[j], j);

                    output.WriteDirectory();
                }
            }

            Process.Start(fileName);
        }
    }
}
    </code>
<code language="vb">
Imports System
Imports System.Diagnostics

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class CreateMultipageTiff
        Private Sub New()
        End Sub
        Public Shared Sub Main()
            Const numberOfPages As Integer = 4

            Const width As Integer = 256
            Const height As Integer = 256
            Const samplesPerPixel As Integer = 1
            Const bitsPerSample As Integer = 8

            Const fileName As String = &quot;CreateMultipageTiff.tif&quot;

            Dim firstPageBuffer As Byte()() = New Byte(height - 1)() {}
            For j As Integer = 0 To height - 1
                firstPageBuffer(j) = New Byte(width - 1) {}
                For i As Integer = 0 To width - 1
                    firstPageBuffer(j)(i) = j * i Mod 256
                Next
            Next

            Using output As Tiff = Tiff.Open(fileName, &quot;w&quot;)
                For page As Integer = 0 To numberOfPages - 1
                    output.SetField(TiffTag.IMAGEWIDTH, width / samplesPerPixel)
                    output.SetField(TiffTag.SAMPLESPERPIXEL, samplesPerPixel)
                    output.SetField(TiffTag.BITSPERSAMPLE, bitsPerSample)
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT)
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)

                    If (page Mod 2 = 0) Then
                        output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK)
                    Else
                        output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISWHITE)
                    End If

                    output.SetField(TiffTag.ROWSPERSTRIP, output.DefaultStripSize(0))
                    output.SetField(TiffTag.XRESOLUTION, 100.0)
                    output.SetField(TiffTag.YRESOLUTION, 100.0)
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH)

                    ' specify that it's a page within the multipage file
                    output.SetField(TiffTag.SUBFILETYPE, FileType.PAGE)
                    ' specify the page number
                    output.SetField(TiffTag.PAGENUMBER, page, numberOfPages)

                    For j As Integer = 0 To height - 1
                        output.WriteScanline(firstPageBuffer(j), j)
                    Next

                    output.WriteDirectory()
                Next
            End Using

            Process.Start(fileName)
        End Sub
    End Class
End Namespace
</code>

  </developerSampleDocument>
</topic>
