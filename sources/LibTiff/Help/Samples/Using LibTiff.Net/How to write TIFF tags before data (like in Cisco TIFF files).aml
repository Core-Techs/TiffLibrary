<?xml version="1.0" encoding="utf-8"?>
<topic id="95e4c191-ff3e-4e11-8a10-1257a95e91f2" revisionNumber="1">
  <developerSampleDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
<para>This sample shows how to create a TIFF image with its tags saved before the image data.</para>
<para></para>
<para>By default, LibTiff.Net saves TIFF tags after the image data but some application or firmware</para>
<para>require TIFF images to have their tags saved before the image data.</para>
<para></para>
<para>For example, Cisco routers require TIFF files with tags saved before the data (so called Cisco TIFF File Format).</para>

    </introduction>
    <code language="cs">
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class WriteTagsBeforeData
    {
        public static void Main()
        {
            string fileName = &quot;random.tif&quot;;
            int totalPages = 3;
            int width = 100;
            int height = 150;

            using (Tiff output = Tiff.Open(fileName, &quot;w&quot;))
            {
                for (short page = 0; page &lt;= totalPages - 1; page++)
                {
                    if (page != 0)
                    {
                        // save previous directory data
                        output.WriteDirectory();

                        // create new directory and make it current
                        output.CreateDirectory();
                        output.SetDirectory(page);
                    }

                    // setup image properties
                    output.SetField(TiffTag.IMAGEWIDTH, width);
                    output.SetField(TiffTag.IMAGELENGTH, height);
                    output.SetField(TiffTag.SAMPLESPERPIXEL, 1);
                    output.SetField(TiffTag.BITSPERSAMPLE, 16);
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT);
                    output.SetField(TiffTag.ROWSPERSTRIP, height);
                    output.SetField(TiffTag.XRESOLUTION, 88.0);
                    output.SetField(TiffTag.YRESOLUTION, 88.0);
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.CENTIMETER);
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);
                    output.SetField(TiffTag.COMPRESSION, Compression.NONE);
                    output.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);

                    // cause tags data to be put in an image
                    output.CheckpointDirectory();

                    // create image data
                    Random random = new Random();
                    for (int i = 0; i &lt;= height - 1; i++)
                    {
                        short[] samples = new short[width];
                        for (int j = 0; j &lt;= width - 1; j++)
                        {
                            samples[j] = Convert.ToInt16(random.Next(0, short.MaxValue));
                        }

                        byte[] buf = new byte[samples.Length * 2];
                        Buffer.BlockCopy(samples, 0, buf, 0, buf.Length);
                        output.WriteScanline(buf, i);
                    }
                }
            }

            System.Diagnostics.Process.Start(fileName);
        }
    }
}

    </code>
<code language="vb">
Imports System
Imports System.Diagnostics
Imports System.Drawing
Imports System.IO

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class WriteTagsBeforeData
        Public Shared Sub Main()
            Dim fileName As String = &quot;random.tif&quot;
            Dim totalPages As Integer = 3
            Dim width As Integer = 100
            Dim height As Integer = 150

            Using output As Tiff = Tiff.Open(fileName, &quot;w&quot;)

                For page As Integer = 0 To totalPages - 1
                    If page &lt;&gt; 0 Then
                        ' save previous directory data
                        output.WriteDirectory()

                        ' create new directory and make it current
                        output.CreateDirectory()
                        output.SetDirectory(page)
                    End If

                    ' setup image properties
                    output.SetField(TiffTag.IMAGEWIDTH, width)
                    output.SetField(TiffTag.IMAGELENGTH, height)
                    output.SetField(TiffTag.SAMPLESPERPIXEL, 1)
                    output.SetField(TiffTag.BITSPERSAMPLE, 16)
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT)
                    output.SetField(TiffTag.ROWSPERSTRIP, height)
                    output.SetField(TiffTag.XRESOLUTION, 88.0)
                    output.SetField(TiffTag.YRESOLUTION, 88.0)
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.CENTIMETER)
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK)
                    output.SetField(TiffTag.COMPRESSION, Compression.NONE)
                    output.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)

                    ' cause tags data to be put in an image
                    output.CheckpointDirectory()

                    ' create image data
                    Dim random As New Random()
                    For i As Integer = 0 To height - 1
                        Dim samples As Short() = New Short(width - 1) {}
                        For j As Integer = 0 To width - 1
                            samples(j) = CShort(random.[Next](0, Short.MaxValue))
                        Next

                        Dim buf As Byte() = New Byte(samples.Length * 2 - 1) {}
                        Buffer.BlockCopy(samples, 0, buf, 0, buf.Length)
                        output.WriteScanline(buf, i)
                    Next
                Next
            End Using

            System.Diagnostics.Process.Start(fileName)
        End Sub
    End Class
End Namespace

</code>

  </developerSampleDocument>
</topic>
